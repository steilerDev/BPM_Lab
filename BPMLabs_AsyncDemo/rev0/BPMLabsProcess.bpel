<!-- BPMLabsProcess BPEL Process [Generated by the Eclipse BPEL Designer] -->
<!-- Date: Tue Sep 08 10:05:07 CEST 2015 -->
<bpel:process name="BPMLabsProcess" targetNamespace="http://de.ustutt.simtech"
	suppressJoinFailure="yes" xmlns:tns="http://de.ustutt.simtech"
	xmlns:bpel="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
	xmlns:ns="http://iaas.uni-stuttgart.de/labs/FlowSOG" xmlns:xsd="http://www.w3.org/2001/XMLSchema">

	<!-- Import the client WSDL -->
	<bpel:import namespace="http://iaas.uni-stuttgart.de/labs/FlowSOG"
		location="BPMLabsServices.wsdl" importType="http://schemas.xmlsoap.org/wsdl/"></bpel:import>
	<bpel:import location="BPMLabsProcessArtifacts.wsdl"
		namespace="http://de.ustutt.simtech" importType="http://schemas.xmlsoap.org/wsdl/" />

	<!-- ================================================================= -->
	<!-- PARTNERLINKS -->
	<!-- List of services participating in this BPEL process -->
	<!-- ================================================================= -->
	<bpel:partnerLinks>
		<!-- The 'client' role represents the requester of this service. -->
		<bpel:partnerLink name="client" partnerLinkType="tns:BPMLabsProcess"
			myRole="BPMLabsProcessProvider" />
		<bpel:partnerLink name="inventoryPartnerLink"
			partnerLinkType="tns:inventoryPartnerLinkType" myRole="callback"
			partnerRole="service"></bpel:partnerLink>
		<bpel:partnerLink name="orderPartnerLink"
			partnerLinkType="tns:orderPartnerLinkType" partnerRole="service"></bpel:partnerLink>
		<bpel:partnerLink name="paymentPartnerLink"
			partnerLinkType="tns:paymentPartnerLinkType" partnerRole="service"></bpel:partnerLink>
		<bpel:partnerLink name="shipmentPartnerLink"
			partnerLinkType="tns:shipmentPartnerLinkType" partnerRole="service"></bpel:partnerLink>
	</bpel:partnerLinks>

	<!-- ================================================================= -->
	<!-- VARIABLES -->
	<!-- List of messages and XML documents used within this BPEL process -->
	<!-- ================================================================= -->
	<bpel:variables>
		<!-- Reference to the message passed as input during initiation -->
		<bpel:variable name="input" messageType="tns:BPMLabsProcessRequestMessage" />

		<!-- Reference to the message that will be returned to the requester -->
		<bpel:variable name="output" messageType="tns:BPMLabsProcessResponseMessage" />
		<bpel:variable name="checkAvailabilityAsyncRequest"
			messageType="ns:checkAvailabilityAsyncInput"></bpel:variable>
		<bpel:variable name="checkAvailabilityAsyncResponse"
			messageType="ns:onFinishCheckAvailabilityInput"></bpel:variable>
		<bpel:variable name="storeOrderResponse" messageType="ns:storeOrderDetailsOutput"></bpel:variable>
		<bpel:variable name="storeOrderRequest" messageType="ns:storeOrderDetailsInput"></bpel:variable>
		<bpel:variable name="calcShipmentCostsResponse"
			messageType="ns:calcShipmentCostsOutput"></bpel:variable>
		<bpel:variable name="calcShipmentCostsRequest"
			messageType="ns:calcShipmentCostsInput"></bpel:variable>
		<bpel:variable name="calcTransactionCostsResponse"
			messageType="ns:calcTransactionCostsOutput"></bpel:variable>
		<bpel:variable name="calcTransactionCostsRequest"
			messageType="ns:calcTransactionCostsInput"></bpel:variable>
		<bpel:variable name="conductPaymentResponse"
			messageType="ns:conductPaymentOutput"></bpel:variable>
		<bpel:variable name="conductPaymentRequest" messageType="ns:conductPaymentInput"></bpel:variable>
		<bpel:variable name="shipProductsResponse" messageType="ns:shipProductsOutput"></bpel:variable>
		<bpel:variable name="shipProductsRequest" messageType="ns:shipProductsInput"></bpel:variable>
		<bpel:variable name="customerID" type="xsd:string"></bpel:variable>
		<bpel:variable name="callbackURL" type="xsd:string"></bpel:variable>
		<bpel:variable name="productList" type="ns:productList"></bpel:variable>
		<bpel:variable name="cancelOrderRequest" messageType="ns:cancelOrderInput"></bpel:variable>
		<bpel:variable name="getOrderDetailsResponse"
			messageType="ns:getOrderDetailsOutput"></bpel:variable>
		<bpel:variable name="getOrderDetailsRequest"
			messageType="ns:getOrderDetailsInput"></bpel:variable>
		<bpel:variable name="orderID" type="xsd:string"></bpel:variable>
        <bpel:variable name="shipmentCosts" type="xsd:decimal"></bpel:variable>
        <bpel:variable name="transactionCosts" type="xsd:decimal"></bpel:variable>
        <bpel:variable name="areAllProductsAvailable" type="xsd:boolean"></bpel:variable>
        <bpel:variable name="orderCosts" type="xsd:decimal"></bpel:variable>
        <bpel:variable name="calcOrderCostsResponse" messageType="ns:calcOrderCostsOutput"></bpel:variable>
        <bpel:variable name="calcOrderCostsRequest" messageType="ns:calcOrderCostsInput"></bpel:variable>
        <bpel:variable name="orderStatus" type="xsd:string"></bpel:variable>
    </bpel:variables>

	<!-- ================================================================= -->
	<!-- ORCHESTRATION LOGIC -->
	<!-- Set of activities coordinating the flow of messages across the -->
	<!-- services integrated within this business process -->
	<!-- ================================================================= -->
	<bpel:correlationSets>
		<bpel:correlationSet name="customerCorrelationSet"
			properties="tns:customerID"></bpel:correlationSet>
	</bpel:correlationSets>
	<bpel:sequence name="main">

		<!-- Receive input from requester. Note: This maps to operation defined 
			in BPMLabsProcess.wsdl -->
		<bpel:receive name="receiveInput" partnerLink="client"
			portType="tns:BPMLabsProcess" operation="process" variable="input"
			createInstance="yes" />

		<!-- Generate reply to synchronous request -->
		<bpel:assign validate="no" name="extractProcessInput">

			<bpel:copy>
				<bpel:from part="payload" variable="input">
					<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:customerID]]></bpel:query>
				</bpel:from>
				<bpel:to variable="customerID"></bpel:to>
			</bpel:copy>
			<bpel:copy>
				<bpel:from>
                    <![CDATA[concat('http://localhost:', $input.payload/tns:portOfODE, '/ode/processes/InventoryService/callback')]]>
				</bpel:from>
				<bpel:to variable="callbackURL"></bpel:to>
			</bpel:copy>
		</bpel:assign>
		<bpel:assign validate="no" name="prepareInventoryServiceRequest">
            
            <bpel:copy>
				<bpel:from expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xquery1.0">
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    <![CDATA[<FlowSOG:checkAvailabilityAsync xmlns:FlowSOG="http://iaas.uni-stuttgart.de/labs/FlowSOG" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">  <FlowSOG:callbackUrl>FlowSOG:callbackUrl</FlowSOG:callbackUrl>  <FlowSOG:customerId>FlowSOG:customerId</FlowSOG:customerId>    {       for $x in $input.payload/tns:products/tns:product       return          <FlowSOG:productId> {$x/tns:productID/text()} </FlowSOG:productId>    }</FlowSOG:checkAvailabilityAsync>]]>
                </bpel:from>
				<bpel:to part="checkAvailabilityAsyncInput" variable="checkAvailabilityAsyncRequest"></bpel:to>



			</bpel:copy>

			<bpel:copy>
				<bpel:from variable="callbackURL"></bpel:from>
				<bpel:to part="checkAvailabilityAsyncInput" variable="checkAvailabilityAsyncRequest">
					<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[ns:callbackUrl]]></bpel:query>
				</bpel:to>

			</bpel:copy>
			<bpel:copy>
				<bpel:from variable="customerID"></bpel:from>
				<bpel:to part="checkAvailabilityAsyncInput" variable="checkAvailabilityAsyncRequest">
					<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[ns:customerId]]></bpel:query>
				</bpel:to>

			</bpel:copy>
		</bpel:assign>
		<bpel:invoke name="checkAvailabilityAsync_InventoryService"
			partnerLink="inventoryPartnerLink" operation="checkAvailabilityAsync"
			portType="ns:InventoryPortType" inputVariable="checkAvailabilityAsyncRequest">
			<bpel:correlations>
				<bpel:correlation set="customerCorrelationSet"
					initiate="yes" pattern="request"></bpel:correlation>
			</bpel:correlations>
		</bpel:invoke>
		
		
		
        
        
        
        
		
		
		
		
		
		<bpel:receive name="receiveAvailabilityResponse_InventoryService"
			partnerLink="inventoryPartnerLink" operation="onFinishCheckAvailability"
			variable="checkAvailabilityAsyncResponse">
			<bpel:correlations>
				<bpel:correlation set="customerCorrelationSet"
					initiate="no"></bpel:correlation>
			</bpel:correlations>
		</bpel:receive>
		<bpel:assign validate="no" name="extractInventoryServiceResponse">
            <bpel:copy>
                <bpel:from>
                    
                    
                    
                    
                    
                    
                    
                    <![CDATA[not(count($checkAvailabilityAsyncResponse.onFinishCheckAvailabilityInput/ns:productList/ns:product/ns:status[text()='not available']) > 0)]]>
                </bpel:from>
                <bpel:to variable="areAllProductsAvailable"></bpel:to>
            </bpel:copy>
            <bpel:copy>
                <bpel:from>
                    <bpel:literal xml:space="preserve"><tns:BPMLabsProcessResponse xmlns:tns="http://de.ustutt.simtech" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <tns:orderStatus></tns:orderStatus>
</tns:BPMLabsProcessResponse>
</bpel:literal>
                </bpel:from>
                <bpel:to part="payload" variable="output"></bpel:to>
            </bpel:copy>
        </bpel:assign>
		




		<bpel:reply name="replyOutput" partnerLink="client"
			portType="tns:BPMLabsProcess" operation="process" variable="output" />
	</bpel:sequence>
</bpel:process>

